generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Minimal auth subset to verify connectivity and migrations
model User {
  id             BigInt   @id @default(autoincrement())
  email          String?  @unique @db.Text
  emailVerified  Boolean  @default(false)
  status         String   @default("active") @db.Text
  lastLoginAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  sessions       Session[]
  challenges     AuthChallenge[]
  profiles       Profile[]

  @@index([lastLoginAt])
  @@index([status])
}

model Session {
  id         BigInt   @id @default(autoincrement())
  userId     BigInt
  tokenHash  String   @map("token_hash") @db.Text
  issuedAt   DateTime @default(now())
  expiresAt  DateTime
  revokedAt  DateTime?
  ip         String?  @db.Text
  userAgent  String?  @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index([userId, expiresAt])
}

/// auth.auth_challenges
model AuthChallenge {
  id            BigInt    @id @default(autoincrement())
  userId        BigInt?
  channel       String    @db.Text
  purpose       String    @db.Text
  target        String    @db.Text
  tokenHash     String?   @unique @map("token_hash") @db.Text
  deepLinkHash  String?   @unique @map("deep_link_hash") @db.Text
  state         String    @default("pending") @db.Text
  meta          Json?
  expiresAt     DateTime  @map("expires_at")
  verifiedAt    DateTime? @map("verified_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([target, channel, purpose, state])
  @@index([expiresAt])
  @@map("auth_challenges")
}

model Profile {
  id           BigInt   @id @default(autoincrement())
  userId       BigInt
  status       String   @default("draft") @db.Text
  nickname     String   @db.Text
  isVisible    Boolean  @default(false)
  publishedAt  DateTime?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  photos ProfilePhoto[]

  @@index([userId, status])
}

model ProfilePhoto {
  id          BigInt  @id @default(autoincrement())
  profileId   BigInt
  storageKey  String  @unique @db.Text
  sha256Hex   String  @db.Text
  isCover     Boolean @default(false)
  position    Int     @default(100)
  sizeBytes   Int
  mime        String  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, sha256Hex])
  @@unique([profileId, position])
  @@index([profileId])
}


